#!/usr/bin/env python

import sys
import argparse
import logging
import multiprocessing

import common
import new

CAMKES_MANIFEST_URL = "https://github.com/seL4/camkes-manifest.git"
CAMKES_MANIFEST_NAME = "next.xml"

def init_logger():
    logger = logging.getLogger(__name__)

    ch = logging.StreamHandler()
    ch.setFormatter(logging.Formatter("%(message)s"))
    logger.addHandler(ch)

    logger.setLevel(logging.INFO)

    return logger

def make_parser():
    parser = argparse.ArgumentParser()

    subparsers = parser.add_subparsers()

    parser_new = subparsers.add_parser('new', description="Create a new project")
    parser_new.add_argument('name', help="Name of project", type=str)
    parser_new.add_argument('--directory', '-d', help="Alternative name of project directory", type=str, nargs="?")
    parser_new.add_argument('--manifest_url', '-u', type=str, help="Base repo manifest", default=CAMKES_MANIFEST_URL)
    parser_new.add_argument('--manifest_name', '-n', type=str, help="Base repo name", default=CAMKES_MANIFEST_NAME)
    parser_new.add_argument('--jobs', '-j', type=int, help="Number of threads to use when downloading code",
                            default=multiprocessing.cpu_count())
    parser_new.set_defaults(func=new.handle_new)

    return parser

def main(args):
    args = make_parser().parse_args(args)
    args.logger = init_logger()
    try:
        args.func(args)
    except new.DirectoryExists as e:
        args.logger.error(e)
    except new.MissingTemplate as e:
        args.logger.error(e)

if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))
